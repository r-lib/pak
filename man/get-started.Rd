% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/docs.R
\name{Get started with pak}
\alias{Get started with pak}
\title{Simplified manual. Start here!}
\description{
You don't need to read long manual pages for a simple task.
This manual page collects the most common pak use cases.
}
\section{Package installation}{
\subsection{Install a package from CRAN or Bioconductor}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::pkg_install("tibble")
}\if{html}{\out{</div>}}

pak automatically sets a CRAN repository and the Bioconductor repositories
that correspons to the current R version.
}

\subsection{Install a package from GitHub}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::pkg_install("tidyverse/tibble")
}\if{html}{\out{</div>}}

Use the \code{user/repo} form.
You can specify a branch or tag: \code{user/repo@branch} or \code{user/repo@tag}.
}

\subsection{Install a package from a URL}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::pkg_install(
  "url::https://cran.r-project.org/src/contrib/Archive/tibble/tibble_3.1.7.tar.gz"
)
}\if{html}{\out{</div>}}

The URL may point to an R package file, made with \verb{R CMD build}, or a
\code{.tar.gz} or \code{.zip} archive of a package tree.
}
}

\section{Package updates}{
\subsection{Update a package}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::pkg_install("tibble")
}\if{html}{\out{</div>}}

\code{pak::pkg_install()} automatically updates the package.
}

\subsection{Update all dependencies of a package}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::pkg_install("tibble", upgrade = TRUE)
}\if{html}{\out{</div>}}

\code{upgrade = TRUE} updates the package itself and all of its dependencies, if
necessary.
}

\subsection{Reinstall a package}{

Add \code{?reinstall} to the package name or package reference in general:

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::pkg_install("tibble?reinstall")
}\if{html}{\out{</div>}}
}
}

\section{Dependency lookup}{
\subsection{Dependencies of a CRAN or Bioconductor package}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::pkg_deps("tibble")
}\if{html}{\out{</div>}}

The results are returned in a data frame.
}

\subsection{Dependency tree of a CRAN / Bioconductor package}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::pkg_deps_tree("tibble")
}\if{html}{\out{</div>}}

The results are also silently returned in a data frame.
}

\subsection{Dependency tree of a package on GitHub}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::pkg_deps_tree("tidyverse/tibble")
}\if{html}{\out{</div>}}

Use the \code{user/repo} form.
As usual, you can also select a branch, tag, or sha, with the
\code{user/repo@branch}, \code{user/repo@tag} or \code{user/repo@sha} forms.
}

\subsection{Dependency tree of the package in the current directory}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::local_deps_tree("tibble")
}\if{html}{\out{</div>}}

Assuming package is in directory \code{tibble}.
}

\subsection{Explain a recursive dependency}{

How does tibble depend on rlang?

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::pkg_deps_explain("tibble", "rlang")
}\if{html}{\out{</div>}}

Use can also use the \code{user/repo} form for packages from GitHub,
\code{url::...} for packages at URLs, etc.
}
}

\section{Package development}{
\subsection{Install dependencies of local package}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::local_install_deps()
}\if{html}{\out{</div>}}
}

\subsection{Install local package}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::local_install()
}\if{html}{\out{</div>}}
}

\subsection{Install all dependencies of local package}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::local_install_dev_deps()
}\if{html}{\out{</div>}}

Installs development and optional dependencies as well.
}
}

\section{Repositories}{
\subsection{List current repositories}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::repo_get()
}\if{html}{\out{</div>}}

If you haven't set a CRAN or Bioconductor repository, pak does that
automatically.
}

\subsection{Add custom repository}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::repo_add(rhub = 'https://r-hub.r-universe.dev')
pak::repo_get()
}\if{html}{\out{</div>}}
}

\subsection{Remove custom repositories}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{options(repos = getOption("repos")["CRAN"])
pak::repo_get()
}\if{html}{\out{</div>}}

If you set the \code{repos} option to a CRAN repo only, or unset it completely,
then pak keeps only CRAN and (by default) Bioconductor.
}

\subsection{Time travel using RSPM}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::repo_add(CRAN = "RSPM@2022-06-30")
pak::repo_get()
}\if{html}{\out{</div>}}

Sets a repository that is equivalent to CRAN's state closest to the
specified date.
Name this repository \code{CRAN}, otherwise pak will also add a default CRAN
repository.
}

\subsection{Time travel using MRAN}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::repo_add(CRAN = "MRAN@2022-06-30")
pak::repo_get()
}\if{html}{\out{</div>}}

Sets a repository that is equivalent to CRAN's state at the specified date.
Name this repository \code{CRAN}, otherwise pak will also add a default CRAN
repository.
}
}

\section{Caches}{
By default pak caches both metadata and downloaded packages.
\subsection{Inspect metadata cache}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::meta_list()
}\if{html}{\out{</div>}}
}

\subsection{Update metadata cache}{

By default \code{pkg_install()} and similar functions automatically update the
metadata for the currently set repositories if it is older than 24 hours.
You can also force an update manually:

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::meta_update()
}\if{html}{\out{</div>}}
}

\subsection{Clean metadata cache}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::meta_clean(force = TRUE)
pak::meta_summary()
}\if{html}{\out{</div>}}
}

\subsection{Inspect package cache}{

Downloaded packages are also cached.

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::cache_list()
}\if{html}{\out{</div>}}
}

\subsection{View a package cache summary}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::cache_summary()
}\if{html}{\out{</div>}}
}

\subsection{Clean package cache}{

\if{html}{\out{<div class="sourceCode r">}}\preformatted{pak::cache_clean()
}\if{html}{\out{</div>}}
}
}

\section{Libraries}{
\subsection{List packages in a library}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::lib_status(Sys.getenv("R_LIBS_USER"))
}\if{html}{\out{</div>}}

Pass the directory of the library as the argument.
}
}

