% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/docs.R
\name{FAQ}
\alias{FAQ}
\title{Frequently Asked Questions}
\description{
Please take a look at this list before asking questions.
}
\section{Package installation}{
\subsection{How do I reinstall a package?}{

pak does not reinstall a package, if the same version is already installed.
Sometimes you still want a reinstall, e.g. to fix a broken installation.
In this case you can delete the package and then install it, or use the
\code{?reinstall} parameter:

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::pkg_install("tibble")
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::pkg_install("tibble?reinstall")
}\if{html}{\out{</div>}}
}

\subsection{How do I install a dependency from a binary package}{

Sometimes it is suffifient to install the binary package of an older
version of a dependency, instead of the newer source package that
potentially needs compilers, system tools or libraries.

\code{pkg_install()} and \code{lockfile_create()} default to \code{upgrade = FALSE}, which
always chooses binaries over source packages, so if you use \code{pkg_install()}
you don't need to do anything extra.

The \verb{local_install_*} functions default to \code{upgrade = TRUE}, as does \code{pak()}
with \code{pkg = NULL}, so for these you need to explicitly use \code{upgrade = FALSE}.
}

\subsection{How do I install a package from source?}{

To force the installation of a source package (instead of a binary
package), use the \code{?source} parameter:

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::pkg_install("tibble?source")
}\if{html}{\out{</div>}}
}

\subsection{How do I install the latest version of a dependency?}{

If you want to always install a dependency from source, because you want
the latest version or some other reason, you can use the \code{source}
parameter with the \verb{<package>=} form: \verb{<package>=?source}.
For example to install tibble, with its cli dependency installed from
source you could write:

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::pkg_install(c("tibble", "cli=?source"))
}\if{html}{\out{</div>}}
}

\subsection{How do I ignore an optional dependency?}{

\if{html}{\out{<div class="sourceCode asciicast">}}\preformatted{pak::pkg_install(
  c("tibble", "DiagrammeR=?ignore", "formattable=?ignore"),
  dependencies = TRUE
)
}\if{html}{\out{</div>}}

The syntax is

\if{html}{\out{<div class="sourceCode">}}\preformatted{<packagename>=?ignore
}\if{html}{\out{</div>}}

Note that you can only ignore \emph{optional} dependencies, i.e. packages in
\code{Suggests} and \code{Enhances}.
}
}

\section{Others}{
\subsection{How can I use pak with renv?}{

You cannot currently, but keep on eye on this issue:
https://github.com/r-lib/pak/issues/343
}
}

