# Build a static Linux aarch64 binary package.
#
# TODO: eventually it should be merged into Dockerfile, so we can
# just build all of them together.

ARG R_MAJOR=4.1

# We need the aarch64 libraries.

FROM --platform=linux/arm64 ghcr.io/r-lib/pak-libs-aarch64:latest AS libs
FROM ghcr.io/r-lib/pak-cross-aarch64:latest AS cross

FROM ghcr.io/r-hub/r-minimal/r-minimal:${R_MAJOR} AS runtime
USER root
WORKDIR /root

# need to install the native package first --------------------------------

# this is not needed for the cross-compilation, but it is easier to use
# the native package for deployment, as long as the deploy code is
# inside the pak package itself.

COPY pak_*.tar.gz /root/

# we need pkgconf for curl, otherwise it does not link to openssl, etc.
RUN apk add bash coreutils findutils pkgconf \
    gcc linux-headers musl-dev curl-dev g++
# needed for C23, which is the default on R-devel
RUN sed -i 's/basename[(][)]/basename(char*)/' /usr/include/string.h

RUN R CMD INSTALL pak_*.tar.gz

# We do this, to make sure that we have the (host) dependencies installed
# for the cross compiler.
RUN cp -r /usr/local/lib/R/library/pak/library/* /usr/local/lib/R/library

# these are needed to push packages, in addition to pak's dependencies
RUN R -q -e 'pak::pkg_install(c("gitcreds", "digest", "glue@1.6.2"))'

# remove native compilers and libs, to make sure we don't pick them up
# for cross compilation
RUN apk del gcc linux-headers musl-dev curl-dev g++

# set up cross-compilation ------------------------------------------------

COPY --from=libs /usr/local /usr/local
COPY --from=cross /root/packages /root/packages
COPY --from=cross /etc/apk/keys/* /etc/apk/keys/

ENV AARCH64_ROOT=/home/csardi/sysroot-aarch64
RUN mkdir -p $AARCH64_ROOT
RUN apk add --initdb --arch aarch64 --root $AARCH64_ROOT
RUN mkdir -p $AARCH64_ROOT/etc/apk/keys
RUN cp -a /etc/apk/keys/* $AARCH64_ROOT/etc/apk/keys/
RUN cp -a /usr/share/apk/keys/* $AARCH64_ROOT/etc/apk/keys/
RUN cp /etc/apk/repositories $AARCH64_ROOT/etc/apk/

RUN apk add \
    ./packages/main/x86_64/binutils-aarch64-*apk \
    ./packages/main/x86_64/gcc-aarch64-*.apk \
    ./packages/main/x86_64/libstdc++-dev-aarch64-*.apk \
    ./packages/main/x86_64/g++-aarch64-*.apk

RUN apk add --arch aarch64 --root $AARCH64_ROOT \
    ./packages/main/aarch64/musl-*.apk \
    ./packages/main/aarch64/musl-dev-*.apk \
    ./packages/main/aarch64/libgcc-*.apk \
    ./packages/main/aarch64/libstdc++-*.apk

# needed for C23, which is the default on R-devel
RUN sed -i 's/basename[(][)]/basename(char*)/' \
    $AARCH64_ROOT/usr/include/string.h

# =========================================================================

ARG TOKEN=dummy

# set up static cross compilation for R -----------------------------------

RUN apk add --arch aarch64 --root $AARCH64_ROOT linux-headers
RUN mkdir -p /root/.R
COPY Makevars-aarch64 /root/.R/Makevars

# Build binary package ----------------------------------------------------

# We could use any platform string, as long as it is aarch64 and linux,
# but we want to make sure that we are using the platform string that
# aarch64 R would give.

RUN mkdir -p /root/lib
RUN R -s -e 'cat(R.Version()$platform)' | \
    sed 's/^x86_64-pc/aarch64-unknown/' > /tmp/r-target-platform
RUN R CMD INSTALL -l /root/lib --no-test-load \
    --configure-args="--host=`cat /tmp/r-target-platform`" \
    pak_*.tar.gz

# Minimize library --------------------------------------------------------

ENV PAKROOT=/root/lib/pak

# We are not linking to libR, so no need to remove that dependency

RUN rm -rf ${PAKROOT}/library/_cache && \
    rm -rf ${PAKROOT}/library/*/help && \
    rm -rf ${PAKROOT}/library/*/doc &&  \
    find ${PAKROOT}/library -name "*.so" | \
        xargs aarch64-alpine-linux-musl-strip -x

# Embed CA certs ----------------------------------------------------------

# This uses the native pak, but that's the same, we just installed it

RUN R -q -e 'pak:::embed_ca_certs(lib = "/root/lib")'

# Build binary package ----------------------------------------------------

# This uses the native pak, but that's the same, we just installed it

RUN R -q -e 'pak:::build_pak_binary_linux(lib = "/root/lib")'
RUN ls -l /tmp

# =========================================================================

FROM --platform=linux/arm64 ghcr.io/r-hub/r-minimal/r-minimal:${R_MAJOR} AS test

# Test --------------------------------------------------------------------

# TODO: this is a pretty minimal test, on purpose, because qemu is pretty
# slow. We probably want a better test for releases.

COPY --from=runtime /tmp/pak_*.tar.gz /root
WORKDIR /root
RUN R CMD INSTALL pak_*.tar.gz
RUN cat /etc/os-release
RUN uname -a
RUN R -q -e 'pak::pak_sitrep()'

RUN apk add gcc musl-dev
# qemu is slow, so give plenty of time for the pak subprocess to start
ENV PKG_SUBPROCESS_TIMEOUT=1200000
RUN R -q -e 'pak::pkg_install("cran/filelock")'

# =========================================================================

# The COPY will force `docker build` to run the tests, before this stage

FROM runtime
COPY --from=test /tmp/dummy* /tmp/

# Install skopeo ----------------------------------------------------------

RUN apk add skopeo

# Deploy ------------------------------------------------------------------

RUN apk add git
RUN git config --global user.email "csardi.gabor@gmail.com"
RUN git config --global user.name "Gabor Csardi"
RUN git config --global credential.helper cache

# `push_packages() only works from within the pak git repo, because it
# checks out the `packaged` branch in another subtree.

ENV GITHUB_PAT=${TOKEN}
RUN git clone --depth 1 https://github.com/r-lib/pak.git

# This uses the native pak, but that's the same, we just installed it.
# This has to be in one step, because the cache credential helper is
# very ephemeral.
RUN cd pak && R -q -e '                                          \
    gitcreds::gitcreds_approve(list(                             \
      url = "https://github.com",                                \
      username = "PersonalAccessToken",                          \
      password = Sys.getenv("GITHUB_PAT")                        \
    ));                                                          \
    pak:::push_packages(                                         \
      dir("/tmp/", pattern = "pak_.*.tar.gz", full.names=TRUE)   \
    )'
